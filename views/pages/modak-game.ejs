<!DOCTYPE html>
<html data-theme="<%= theme ?? 'purple' %>" data-font="<%= font ?? 'Lato' %>" lang="en">

<head>
  <%- include('../partials/head') %>
  <title>Modak Catcher</title>
  <style>
    body {
      margin: 0;
      font-family: var(--font-family);
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      overflow: hidden;
      color: #fff;
      background: linear-gradient(rgba(0, 0, 0, 0.85), rgba(0, 0, 0, 0.85)), url('/images/jnv-bg-1.jpg') center center / cover no-repeat;
      backdrop-filter: blur(10px);
    }

    .game-container {
      background-color: transparent;
      padding: 20px;
      text-align: center;
      max-width: 100vw;
      height: 80vh;
      max-height: 700px;
    }

    h1 {
      margin-top: 0;
      color: #fff;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
    }

    #gameCanvas {
      background-color: transparent;
      border: 1px solid var(--text-light);
      border-radius: 12px;
      cursor: none;
      box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.1);
      max-width: 100%;
      height: auto;
    }

    .info-panel {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px 20px;
      margin-bottom: 15px;
      background-color: rgba(0, 0, 0, 0.2);
      border-radius: 10px;
    }

    #score {
      font-size: 1.5em;
      font-weight: 600;
    }

    button {
      background: #FFC107;
      color: #4E342E;
      border: none;
      padding: 10px 20px;
      border-radius: 8px;
      font-family: 'Poppins', sans-serif;
      font-weight: 600;
      font-size: 1em;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    button:hover {
      background: #FFA000;
      transform: translateY(-2px);
      box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
    }

    button:active {
      transform: translateY(0);
    }

    #ganesha_img{
      height: 200px;
    }
  </style>
</head>

<body>
  <%- include('../partials/navbar') %>
  <br><br>
  <div class="game-container">
    <h1>Modak Catcher</h1>
    <img id="ganesha_img" src="/images/ganesha_game.gif" alt="">
    <div class="info-panel">
      <div id="score">Modaks Caught: <span style="color: var(--primary)"><%= score %></span></div>
    </div>
    <canvas id="gameCanvas"></canvas>
  </div>

  <script>

    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    const scoreElement = document.getElementById('score');

    alert("The player with highest score will get a special badge at the end of Ganesh Chaturthi theme. It could be you ðŸ˜‰")

    let score = <%= score %>;
    let gameLoop;
    let modakInterval;
    let difficultyInterval;
    let isImageLoaded = false;

    let baseModakSpeed = 3;
    const maxModakSpeed = 6;
    const speedIncrement = 0.2;

    let modakCreationInterval = 400; 
    const maxModakCreationInterval = 1200; 
    const intervalIncrement = 50;

    window.addEventListener('beforeunload', () => {
      navigator.sendBeacon('/modak/score', JSON.stringify({
        score
      }))
    })
    const modakImage = new Image();
    modakImage.src = '/images/modak.png';

    modakImage.onload = () => {
      isImageLoaded = true;
      startGame();
    };
    modakImage.onerror = () => {
      console.error("Failed to load the modak image. The game will run, but no modaks will appear.");
      startGame();
    };


    function setCanvasSize() {
      const container = canvas.parentElement;
      const containerWidth = container.clientWidth;
      const maxWidth = 600;
      const canvasWidth = Math.min(containerWidth, maxWidth);
      const canvasHeight = canvasWidth * 0.75;

      canvas.width = canvasWidth;
      canvas.height = canvasHeight;
    }

    window.addEventListener('resize', () => {
      setCanvasSize();
    });

    const bowl = {
      width: 0,
      height: 0,
      x: 0,
      y: 0,
      color: '#8D6E63',
      draw: function() {
        ctx.beginPath();
        ctx.fillStyle = this.color;
        ctx.moveTo(this.x, this.y);
        ctx.quadraticCurveTo(this.x + this.width / 2, this.y + this.height * 1.5, this.x + this.width, this.y);
        ctx.lineTo(this.x + this.width * 0.9, this.y - this.height * 0.5);
        ctx.quadraticCurveTo(this.x + this.width / 2, this.y - this.height * 0.2, this.x + this.width * 0.1, this.y - this.height * 0.5);
        ctx.closePath();
        ctx.fill();
      }
    };

    let modaks = [];

    function createModak() {
      if (!isImageLoaded) return;
      if (document.hidden) return;

      const modakSize = canvas.width * 0.1;
      modaks.push({
        x: Math.random() * (canvas.width - modakSize),
        y: -modakSize,
        size: modakSize,
        speed: baseModakSpeed + Math.random() * 2.1,
      });
    }

    function moveBowl(e) {
      const canvasRect = canvas.getBoundingClientRect();
      let mouseX = (e.clientX || e.touches[0].clientX) - canvasRect.left;
      bowl.x = mouseX - bowl.width / 2;

      if (bowl.x < 0) bowl.x = 0;
      if (bowl.x + bowl.width > canvas.width) bowl.x = canvas.width - bowl.width;
    }

    canvas.addEventListener('mousemove', moveBowl);
    canvas.addEventListener('touchmove', function(e) {
      e.preventDefault();
      moveBowl(e);
    });


    function update() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      bowl.draw();

      if (isImageLoaded) {
        for (let i = modaks.length - 1; i >= 0; i--) {
          const modak = modaks[i];
          modak.y += modak.speed;

          ctx.drawImage(modakImage, modak.x, modak.y, modak.size, modak.size);

          if (modak.x > bowl.x && modak.x + modak.size < bowl.x + bowl.width &&
            modak.y + modak.size > bowl.y - bowl.height * 0.5) {

            score++;
            scoreElement.innerHTML = `Modaks Caught: <span style="color: var(--primary)">${score}</span>`;
            modaks.splice(i, 1);
          } else if (modak.y > canvas.height) {
            modaks.splice(i, 1);
          }
        }
      }

      gameLoop = requestAnimationFrame(update);
    }
    
    function increaseDifficulty() {
      if (baseModakSpeed < maxModakSpeed) {
        baseModakSpeed += speedIncrement;
      }

      if (modakCreationInterval < maxModakCreationInterval) {
        modakCreationInterval += intervalIncrement;
        
        clearInterval(modakInterval);
        modakInterval = setInterval(createModak, modakCreationInterval);
      }
    }

    function startGame() {
      cancelAnimationFrame(gameLoop);
      clearInterval(modakInterval);
      clearInterval(difficultyInterval);

      score = <%= score %>;
      modaks = [];
      scoreElement.innerHTML = `Modaks Caught: <span style="color: var(--primary)">${score}</span>`;

      baseModakSpeed = 2;
      modakCreationInterval = 1000;

      setCanvasSize();
      bowl.width = canvas.width * 0.15;
      bowl.height = canvas.height * 0.08;
      bowl.x = (canvas.width / 2) - (bowl.width / 2);
      bowl.y = canvas.height - bowl.height;

      modakInterval = setInterval(createModak, modakCreationInterval);
      difficultyInterval = setInterval(increaseDifficulty, 5000);
      
      update();
    }

    document.querySelector(".header").style.display = ''
  </script>
</body>

</html>