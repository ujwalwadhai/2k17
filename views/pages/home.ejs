<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head.ejs') %>
  <title>Home ‚ù§Ô∏è 2k17</title>
  <link rel="stylesheet" href="/styles/css/home.css" />
</head>
<body>
  <%- include('../partials/loader.ejs') %>
  <%- include('../partials/navbar.ejs') %>

  <main>
    <!-- Hero Section -->
    <section class="hero">
        <div class="hero-text">
          <h2 id="greeting"><span id="greeting-msg"></span>, <%= user.name.split(' ')[0] %></h2>
          <p>Ready to catch up with your batchmates and relive the best moments of 2k17?</p><br>
          <a class="cta-btn" onclick="document.getElementById('posts').scrollIntoView({behavior: 'smooth'})">Explore &nbsp; &nbsp; <span class="fal fa-arrow-right"></span></a>
        </div>
        <div class="featured-photo" onclick="window.open()">
          <img src="/images/jnv-bg-1.jpg" alt="Today's featured photo" class="featured-photo-img">
          <div class="overlay-text">Featured photo</div>
        </div>
    </section>

    <div class="events-container">
    <section id="events" class="events">
      <p class="heading">Upcoming Birthdays</p>
      <% if(birthdays.length > 0){ %>
      <% birthdays.forEach(member => { %>
      <div class="event" onclick="window.location.href='/u/<%= member.username %>'">
        <img src="<%= member.profile ? member.profile : '/images/user.png' %>" alt="" class="event-img">
        <div class="event-info">
          <p class="title"><%= member.name %> üéÇ</p>
          <p class="description">on <%- formatDOB(member.dob) %></p>
        </div>
      </div>
      <% }) %>
      <% } else { %>
        <p class="grey-1">No upcoming birthdays in next 30 days.</p>
      <% } %>
    </section>
    </div><br><br><br>

    <div class="create-post-box small-only" onclick="openPostPopup()">
      <p class="heading">Create a new post</p>
      <div class="pseudo-post-box">
        <input readonly type="text" placeholder="What's on your mind?">
        <span class="fal fa-image"></span>
      </div>
    </div>
    <span class="small-only"><br><br></span>

    <section class="posts" id="posts">
      <p class="heading">Posts in last 6 months</p>
    </section>

    <br><br><br><br><br>
  </main>

  <div id="comments-popup">
    <div class="overlay" onclick="hidePopup()" id="overlay"></div>
    <div class="comments-box">
      <div class="heading"><p>Comments</p><p class="close-icon fas fa-times" onclick="hidePopup()"></p></div>
      <div class="comments-list" id="comments-list">
      </div>
      <div class="input-area">
        <input id="new-comment" autocomplete="off" placeholder="Write a comment..."/>
        <button type="button" id="newCommentBtn">Post</button>
      </div>
    </div>
  </div>

  <div id="post-popup" class="popup-wrapper">
    <div class="overlay" onclick="closePostPopup()"></div>

    <div class="post-box">
      <div class="heading">
        <p>Create a new post</p>
        <p class="close-icon fal fa-xmark" onclick="closePostPopup()"></p>
      </div>
      <textarea name="content" placeholder="What's on your mind?" id="post-text" required></textarea>
      <input type="file" id="media-input" accept="image/*">
      <label for="media-input" class="upload-label"><span class="fal fa-upload"></span> &nbsp; Add photo</label>
      <div class="preview" id="media-preview"></div>

      <div class="action-buttons">
        <button class="cancel-btn" onclick="closePostPopup()">Cancel</button>
        <button class="create-post-btn" onclick="createPost('<%= user._id %>')">Post</button>
      </div>
    </div>
  </div>
  <%- include('../partials/footer.ejs') %>

  <script src="/js/home.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      loadPosts('<%= user._id %>');
      document.getElementById('media-input').addEventListener('change', function () {
        var preview = document.getElementById('media-preview');
        preview.innerHTML = '';
        Array.from(this.files).forEach(file => {
          var url = URL.createObjectURL(file);
          var el = file.type.startsWith('image')
            ? `<img src="${url}" />`
            : `<video src="${url}" muted autoplay loop />`;
          preview.innerHTML += el;
        });
      });
    })


const VAPID_PUBLIC_KEY = 'BFIJXQLJEa3Y7u8J-15-ApYycloB0kxZyUa6EDmF9lZaJ16p35kVHCqLcnwi-h4dpvZv21xWNO2D3h8z7aelAzg'; // IMPORTANT: Replace this

function urlBase64ToUint8Array(base64String) {
  const padding = '='.repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding)
    .replace(/-/g, '+')
    .replace(/_/g, '/');
  const rawData = window.atob(base64);
  const outputArray = new Uint8Array(rawData.length);
  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }
  return outputArray;
}

async function subscribeUserToPush() {
  try {
    const registration = await navigator.serviceWorker.ready; // Ensure SW is active
    const existingSubscription = await registration.pushManager.getSubscription();

    if (existingSubscription) {
      console.log('User IS already subscribed.');
      // Optional: You might want to send it to the server again to ensure it's up-to-date
      // sendSubscriptionToBackend(existingSubscription);
      return;
    }

    const subscription = await registration.pushManager.subscribe({
      userVisibleOnly: true,
      applicationServerKey: urlBase64ToUint8Array(VAPID_PUBLIC_KEY)
    });
    console.log('User is subscribed:', subscription);
    await sendSubscriptionToBackend(subscription);
  } catch (error) {
    console.error('Failed to subscribe the user: ', error);
    if (Notification.permission === 'denied') {
      console.warn('Permission for notifications was denied');
    }
  }
}

async function sendSubscriptionToBackend(subscription) {
  try {
    const response = await fetch('/subscribe-push', { // We will create this backend route
      method: 'POST',
      body: JSON.stringify(subscription),
      headers: {
        'Content-Type': 'application/json'
      }
    });
    if (!response.ok) {
      throw new Error('Backend failed to accept subscription');
    }
    console.log('Subscription sent to backend successfully.');
  } catch (error) {
    console.error('Error sending subscription to backend: ', error);
  }
}

function requestNotificationPermissionAndSubscribe() {
  if (!('Notification' in window) || !('serviceWorker' in navigator) || !('PushManager' in window)) {
    console.warn('Push messaging is not supported');
    return;
  }
  Notification.requestPermission(status => {
    console.log('Notification permission status:', status);
    if (status === 'granted') {
      console.log('Permission granted. Subscribing user...');
      subscribeUserToPush();
    } else {
      console.log('Permission not granted.');
    }
  });
}

// Register Service Worker
if ('serviceWorker' in navigator && 'PushManager' in window) {
  navigator.serviceWorker.register('/js/sw.js')
    .then(function(registration) {
      console.log('Service Worker registered with scope:', registration.scope);
      if (Notification.permission === 'granted') {
          subscribeUserToPush();
      } else if (Notification.permission !== 'denied') {
          console.log('Notification permission not yet granted. Consider adding a UI element to trigger permission request.');
          requestNotificationPermissionAndSubscribe();
      }
    }).catch(function(error) {
      console.log('Service Worker registration failed:', error);
    });
} else {
  console.warn('Push messaging is not supported by this browser.');
}


  </script>

</body>
</html>
